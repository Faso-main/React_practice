import json
from typing import List, Dict, Any

class ProductTreeGenerator:
    """Генератор дерева товаров с четкой структурой"""
    
    def __init__(self):
        # Основные категории товаров
        self.categories = {
            "Канцтовары": {
                "Письменные принадлежности": [
                    "Ручки шариковые", "Ручки гелевые", "Карандаши простые", 
                    "Карандаши цветные", "Маркеры", "Текстовыделители"
                ],
                "Бумажная продукция": [
                    "Тетради", "Блокноты", "Ежедневники", "Бумага офисная",
                    "Конверты", "Папки-скоросшиватели"
                ],
                "Чертежные принадлежности": [
                    "Линейки", "Транспортиры", "Циркули", "Лекала",
                    "Готовальни", "Чертежные доски"
                ]
            },
            "Электроника": {
                "Компьютерная техника": [
                    "Ноутбуки", "Системные блоки", "Мониторы", "Клавиатуры",
                    "Мыши", "Веб-камеры", "Наушники"
                ],
                "Бытовая электроника": [
                    "Смартфоны", "Планшеты", "Телевизоры", "Фотоаппараты",
                    "Портативные колонки", "Умные часы"
                ],
                "Комплектующие": [
                    "Процессоры", "Видеокарты", "Оперативная память",
                    "Жесткие диски", "Материнские платы", "Блоки питания"
                ]
            },
            "Бытовая техника": {
                "Крупная техника": [
                    "Холодильники", "Стиральные машины", "Посудомоечные машины",
                    "Плиты электрические", "Плиты газовые", "Духовые шкафы"
                ],
                "Малая техника": [
                    "Чайники электрические", "Кофеварки", "Блендеры",
                    "Микроволновые печи", "Пылесосы", "Утюги"
                ],
                "Климатическая техника": [
                    "Кондиционеры", "Обогреватели", "Вентиляторы",
                    "Увлажнители воздуха", "Очистители воздуха"
                ]
            },
            "Одежда": {
                "Мужская одежда": [
                    "Футболки", "Рубашки", "Джинсы", "Куртки",
                    "Костюмы", "Спортивная одежда"
                ],
                "Женская одежда": [
                    "Платья", "Юбки", "Блузки", "Брюки",
                    "Верхняя одежда", "Спортивная одежда"
                ],
                "Детская одежда": [
                    "Для мальчиков", "Для девочек", "Для новорожденных",
                    "Школьная форма", "Спортивная одежда"
                ]
            },
            "Продукты питания": {
                "Бакалея": [
                    "Крупы", "Макаронные изделия", "Мука", "Сахар",
                    "Соль", "Специи", "Масло растительное"
                ],
                "Молочные продукты": [
                    "Молоко", "Кефир", "Сметана", "Творог",
                    "Сыр", "Йогурты", "Масло сливочное"
                ],
                "Мясо и птица": [
                    "Говядина", "Свинина", "Курица", "Индейка",
                    "Колбасы", "Сосиски", "Полуфабрикаты"
                ]
            }
        }
        
        # Дополнительные характеристики для детализации
        self.attributes = {
            "Ручки шариковые": ["синие", "черные", "красные", "гелевые", "с масляными чернилами"],
            "Карандаши простые": ["мягкие (B)", "средние (HB)", "твердые (H)", "угольные"],
            "Тетради": ["12 листов", "18 листов", "24 листа", "48 листов", "96 листов", "в клетку", "в линейку"],
            "Ноутбуки": ["игровые", "офисные", "ультрабуки", "трансформеры", "бюджетные"],
            "Смартфоны": ["бюджетные", "средний класс", "флагманы", "игровые"],
            "Холодильники": ["однокамерные", "двухкамерные", "side-by-side", "встраиваемые"],
            "Кофеварки": ["капельные", "рожковые", "капсульные", "френч-пресс"]
        }

    def generate_tree(self) -> List[Dict[str, Any]]:
        """Генерирует полное дерево товаров"""
        tree = []
        category_id = 1
        
        for category_name, subcategories in self.categories.items():
            category_node = {
                "id": category_id,
                "name": category_name,
                "type": "category",
                "children": []
            }
            category_id += 1
            subcategory_id = category_id * 100
            
            for subcat_name, groups in subcategories.items():
                subcategory_node = {
                    "id": subcategory_id,
                    "name": subcat_name,
                    "type": "subcategory",
                    "children": []
                }
                subcategory_id += 1
                group_id = subcategory_id * 100
                
                for group_name in groups:
                    group_node = {
                        "id": group_id,
                        "name": group_name,
                        "type": "product_group",
                        "children": []
                    }
                    group_id += 1
                    
                    # Добавляем конкретные товары с характеристиками
                    if group_name in self.attributes:
                        product_id = group_id * 100
                        for attr in self.attributes[group_name]:
                            product_node = {
                                "id": product_id,
                                "name": f"{group_name} {attr}",
                                "type": "product"
                            }
                            group_node["children"].append(product_node)
                            product_id += 1
                    else:
                        # Если нет специальных атрибутов, создаем базовый товар
                        product_node = {
                            "id": group_id * 100,
                            "name": group_name,
                            "type": "product"
                        }
                        group_node["children"].append(product_node)
                    
                    subcategory_node["children"].append(group_node)
                
                category_node["children"].append(subcategory_node)
            
            tree.append(category_node)
        
        return tree

    def save_to_json(self, filename: str = "product_tree.json"):
        """Сохраняет дерево в JSON файл"""
        tree = self.generate_tree()
        
        result = {
            "tree_name": "Дерево товаров",
            "description": "Структурированная классификация товаров",
            "total_categories": len(tree),
            "categories": tree
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2, sort_keys=True)
        
        print(f"Дерево сохранено в файл: {filename}")
        print(f"Количество корневых категорий: {len(tree)}")

def main():
    """Основная функция"""
    print("Генерация дерева товаров...")
    
    generator = ProductTreeGenerator()
    generator.save_to_json("product_tree_samara.json")
    
    print("Готово!")

if __name__ == "__main__":
    main()